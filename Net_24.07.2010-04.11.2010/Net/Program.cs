using System;
using System.Diagnostics;

namespace Net
{
	class Program
	{
		static void Main()
		{
			/*
			Link @this = Link.Create("this");
			Link looks = Link.Create("looks");
			Link apple = Link.Create("apple");

			Link thisLooksApple = Link.Create(@this, looks, apple);

			Link to = Link.Create("to");
			Link me = Link.Create("me");
			Link mary = Link.Create("mary");
			Link ann = Link.Create("ann");

			// "это яблоко" - ломает всё.

			Link thisLooksAppleToMe = Link.Create(thisLooksApple, to, me);
			Link thisLooksAppleToMary = Link.Create(thisLooksApple, to, mary);
			Link thisLooksAppleToAnn = Link.Create(thisLooksApple, to, ann);

			Link sequence = LinkConverter.FromList(new List<Link>() { @this, looks, apple, to, me });
			 */

			//ann.Delete();
			//@this.Delete();

			Stopwatch sw = Stopwatch.StartNew();

			for (int i = 1; i < 10000; i++)
			{
				Link helloWorld = LinkConverter.FromString("Hello");
				string helloWorldString = LinkConverter.ToString(helloWorld);
			}

			Console.WriteLine(sw.Elapsed.ToString());

			sw = Stopwatch.StartNew();

			for (int i = 1; i < 10000; i++)
			{
				Link ten = LinkConverter.FromNumber(i);
				long tenNumber = LinkConverter.ToNumber(ten);
			}

			Console.WriteLine(sw.Elapsed.ToString());

			GC.Collect();

			// Magic
			if (LinkConverter.FromNumber(10) == LinkConverter.FromNumber(12 - 2))
			{
				// It is true!
			}

			// Интересно сделать Performance тест, сколько созданий/удалений можно выполнить за единицу времени.
			// Также интересно проверить, возможна ли многопоточность в Net.

			// Новый план:
			// 
			// +1. Гарантировать что описание символов, и чисел не будут дублироваться, а также, что каждому символу будет дано имя.
			// 1.5. Реализовать более хитрую работу с числами, все "степени двойки" можно представлять в виде
			// 1 + 1 = 2 + 2 = 4 + 4 = ... Более того, расширять диапазон посчитанных степеней двоек можно 
			// только при необходимости представить какое-то очень большое число.
			// 1.75. Теоретически возможно представление отрицательных чисел подобным образом: -1 + -1 = -2 ...
			// 2. Начать проект по сбору примеров предложений с искомыми словами (через google). Список слов имеется.
			// 3. Из этого проекта будет уже много данных для дальнейших исследований.
			// 4. Начать пересматривать накопленные рукописи
			
			// Компилятор:
			// 1. Начать проработку набора базовых команд и прототип выполнителя.

			// Задачи по проще:
			// +0. Create уже есть, нужно сделать Delete. 
			// +1. Реализовать работу со строгими последовательностями (1 и (2 и (3 и end)))
			// +2. В процессе реализации понадобится реализация представления целых чисел.
			// +3. Так как в последовательности цифры могут повторятся, и для одних и тех же чисел нужно использовать одни и те же линки.
			// +В основном это будет иметь полезный эффект для строк.
			// +3. Затем необходимо написать конвертер строк здесь пригодится уже существующий поиск уникальных цифр.
			// 4. Далее уже хитрее, можно искать повторяющиеся подпоследовательности, в большинстве случаев это будут
			// словоформы, слоги, корни слов и т.п.
			// +5. Затем можно будет сделать подсистему, позволяющую давать названия на английском языке для Link-ов сущностей.

			// Хитрая задача: простой разбор текста и представление в сети
			// На самом деле не всё так просто, так как ИИ пока не будет способен логически сгруппировать текст.
			//"This is looks apple to me"
			// Будет представлено в виде:
			// Link.Create(Link.Create(Link.Create(), Link.Create(), Link.Create()), Link.Create(), Link.Create());
			Console.ReadLine();
		}

		// Нужна связка склеиватель
		// Нужен link являющийся концом коллекции, а также являющийся началом.
		// (begining and end) == Empty collection

		// Существуют два типа последовательностей (конечная, и бесконечная)
		// В бесконечной последовательности может не быть начала и конца, либо одного из двух.
		// Внутри бесконечной последовательности также как и с краёв можно использовать элемент опущения (Elipsis)
		// (... 1 2 3 ... 6 7 ... )
		// Это может быть полезно для хранения всех используемых чисел.
		// Так как из своей природы список реализуется линками, то фактически он являтся дважды связанным,
		// что в свою очередь позволяет перемещаться по списку в любую сторону, а также вставлять элементы в любом его месте.
	}
}
